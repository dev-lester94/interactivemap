{"ast":null,"code":"import _defineProperty from \"/Users/reisturm/Desktop/Projects/interactivemap/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/reisturm/Desktop/Projects/interactivemap/src/components/Searchbar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport styled from 'emotion/styled';\nimport axios from 'axios';\nimport '../css/Searchbar.css';\nimport Suggestions from './Suggestions';\nimport buildingsJSON from '../buildings.json'; // export class Searchbar extends Component {\n//   state = {\n//     buildings: buildingsJSON.map(b => b.desc),\n//     suggestions: [],\n//     text: ''\n//   };\n//   // function that is called whenever input changes\n//   onTextChanged = e => {\n//     const value = e.target.value;\n//     let suggestions = [];\n//     if (value.length > 0) {\n//       const regex = new RegExp(`^${value}`, 'i');\n//       suggestions = this.state.buildings\n//         .map(building => building.name)\n//         .sort()\n//         .filter(v => regex.test(v));\n//     }\n//     this.setState(() => ({ suggestions, text: value }));\n//   };\n//   renderSuggestions() {\n//     const { suggestions } = this.state;\n//     if (suggestions.length === 0) {\n//       return null;\n//     }\n//     return (\n//       <ul>\n//         {suggestions.map(building => (\n//           <li onClick={() => this.suggestionSelected(building)}>{building}</li>\n//         ))}\n//       </ul>\n//     );\n//   }\n//   suggestionSelected(value) {\n//     this.setState(() => ({ text: value, suggestions: [] }));\n//   }\n//   render() {\n//     const { text } = this.state;\n//     return (\n//       <div className='autoCompleteText'>\n//         <input\n//           value={text}\n//           onChange={this.onTextChanged}\n//           placeholder='Search...'\n//           type='text'\n//         />\n//         {this.renderSuggestions()}\n//       </div>\n//     );\n//   }\n// }\n\nclass Searchbar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      buildings: buildingsJSON.map(b => b.desc),\n      selectedOption: null\n    };\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Select, {\n      value: this.state.selectedOption,\n      options: this.state,\n      onChange: this.handleChange,\n      placeholder: \"Search...\",\n      openMenuOnClick: false,\n      classNamePrefix: \"select\",\n      styles: customStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Searchbar;\nconst customStyles = {\n  control: (base, state) => _objectSpread({}, base, {\n    fontFamily: 'Times New Roman',\n    fontSize: 18,\n    border: state.isFocused ? 0 : 0,\n    boxShadow: state.isFocused ? 0 : 0,\n    cursor: 'text',\n    borderRadius: 0,\n    borderBottom: 'solid 1px'\n  }),\n  option: (styles, {\n    isFocused\n  }) => {\n    return _objectSpread({}, styles, {\n      cursor: 'pointer',\n      backgroundColor: isFocused ? 'white' : 'white',\n      color: isFocused ? 'rgba(255, 80, 86)' : 'black',\n      lineHeight: 2\n    });\n  },\n  input: styles => _objectSpread({}, styles, {\n    color: 'black',\n    fontFamily: 'Times New Roman, Times, Serif'\n  }),\n  menu: styles => _objectSpread({}, styles, {\n    marginTop: 0,\n    boxShadow: 'none',\n    borderRadius: 0\n  }),\n  singleValue: styles => _objectSpread({}, styles, {\n    color: 'rgba(255, 80, 86)'\n  })\n}; // const StyledSearch = styled(Select)`\n//   width: 300px;\n//   padding: 20px;\n//   .select__menu-list::-webkit-scrollbar {\n//     background: #f1f1f1;\n//   }\n//   .select__menu-list::-webkit-scrollbar-thumb {\n//     background: #888;\n//   }\n//   .select__menu-list::-webkit-scrollbar-thumb:hover {\n//     background: #555;\n//   }\n// `;","map":{"version":3,"sources":["/Users/reisturm/Desktop/Projects/interactivemap/src/components/Searchbar.js"],"names":["React","Component","Select","styled","axios","Suggestions","buildingsJSON","Searchbar","state","buildings","map","b","desc","selectedOption","handleChange","setState","render","customStyles","control","base","fontFamily","fontSize","border","isFocused","boxShadow","cursor","borderRadius","borderBottom","option","styles","backgroundColor","color","lineHeight","input","menu","marginTop","singleValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport styled from 'emotion/styled';\nimport axios from 'axios';\nimport '../css/Searchbar.css';\nimport Suggestions from './Suggestions';\n\nimport buildingsJSON from '../buildings.json';\n\n// export class Searchbar extends Component {\n//   state = {\n//     buildings: buildingsJSON.map(b => b.desc),\n//     suggestions: [],\n//     text: ''\n//   };\n\n//   // function that is called whenever input changes\n//   onTextChanged = e => {\n//     const value = e.target.value;\n//     let suggestions = [];\n//     if (value.length > 0) {\n//       const regex = new RegExp(`^${value}`, 'i');\n//       suggestions = this.state.buildings\n//         .map(building => building.name)\n//         .sort()\n//         .filter(v => regex.test(v));\n//     }\n//     this.setState(() => ({ suggestions, text: value }));\n//   };\n\n//   renderSuggestions() {\n//     const { suggestions } = this.state;\n//     if (suggestions.length === 0) {\n//       return null;\n//     }\n//     return (\n//       <ul>\n//         {suggestions.map(building => (\n//           <li onClick={() => this.suggestionSelected(building)}>{building}</li>\n//         ))}\n//       </ul>\n//     );\n//   }\n\n//   suggestionSelected(value) {\n//     this.setState(() => ({ text: value, suggestions: [] }));\n//   }\n//   render() {\n//     const { text } = this.state;\n\n//     return (\n//       <div className='autoCompleteText'>\n//         <input\n//           value={text}\n//           onChange={this.onTextChanged}\n//           placeholder='Search...'\n//           type='text'\n//         />\n//         {this.renderSuggestions()}\n//       </div>\n//     );\n//   }\n// }\n\nclass Searchbar extends Component {\n  state = {\n    buildings: buildingsJSON.map(b => b.desc),\n    selectedOption: null\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n  render() {\n    return (\n      <div>\n        <Select\n          value={this.state.selectedOption}\n          options={this.state}\n          onChange={this.handleChange}\n          placeholder='Search...'\n          openMenuOnClick={false}\n          classNamePrefix='select'\n          styles={customStyles}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Searchbar;\n\nconst customStyles = {\n  control: (base, state) => ({\n    ...base,\n    fontFamily: 'Times New Roman',\n    fontSize: 18,\n    border: state.isFocused ? 0 : 0,\n    boxShadow: state.isFocused ? 0 : 0,\n    cursor: 'text',\n    borderRadius: 0,\n    borderBottom: 'solid 1px'\n  }),\n\n  option: (styles, { isFocused }) => {\n    return {\n      ...styles,\n      cursor: 'pointer',\n      backgroundColor: isFocused ? 'white' : 'white',\n      color: isFocused ? 'rgba(255, 80, 86)' : 'black',\n      lineHeight: 2\n    };\n  },\n\n  input: styles => ({\n    ...styles,\n    color: 'black',\n    fontFamily: 'Times New Roman, Times, Serif'\n  }),\n\n  menu: styles => ({\n    ...styles,\n    marginTop: 0,\n    boxShadow: 'none',\n    borderRadius: 0\n  }),\n\n  singleValue: styles => ({\n    ...styles,\n    color: 'rgba(255, 80, 86)'\n  })\n};\n\n// const StyledSearch = styled(Select)`\n//   width: 300px;\n//   padding: 20px;\n//   .select__menu-list::-webkit-scrollbar {\n//     background: #f1f1f1;\n//   }\n//   .select__menu-list::-webkit-scrollbar-thumb {\n//     background: #888;\n//   }\n//   .select__menu-list::-webkit-scrollbar-thumb:hover {\n//     background: #555;\n//   }\n// `;\n"]},"metadata":{},"sourceType":"module"}